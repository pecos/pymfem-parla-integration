#!/bin/bash
#----------------------------------------------------
#   Script for multi-core CPU runs on 
#   TACC Frontera CLX nodes
#
#   *** Job in Small Queue***
# 
# Last revised: 14 December 2022
#
# Notes: This particular script launches a python
# script that analyzes a collection of directed,
# possibly cyclic graphs associated with the traversal
# of a unstructured finite element meshes.
#
# We assume that the graph files have already been generated
# and are available in Matrix-Market format.
#----------------------------------------------------

# Can't use ${SCRATCH} here because sbatch doesn't understand shell commands...
#SBATCH -J generate_data          # Job name
#SBATCH -o /scratch1/09047/was2489/generate_data.o%j      # Name of stdout output file
#SBATCH -e /scratch1/09047/was2489/generate_data.e%j      # Name of stderr error file
#SBATCH -p small           # Queue (partition) name
#SBATCH -N 1               # Total # of nodes (must be 1 for serial)
#SBATCH -n 56              # Total # of cores
#SBATCH -t 48:00:00        # Run time (hh:mm:ss)
#SBATCH --mail-type=all    # Send email at begin and end of job
#SBATCH -A PHY21005        # Project/Allocation name (req'd if you have more than 1)
#SBATCH --mail-user=william.sands@austin.utexas.edu

# To use the conda environment and modules therein, we
# need to source the conda.sh file
source ${HOME}/miniconda3/etc/profile.d/conda.sh

# Go to the directory of the project
cd ${WORK}/Projects/pymfem-parla-integration/code/graph_construction

# Activate the Python environment
conda activate PyMFEM_env

# Specify the list of mesh files that are to be used

# Basic meshes supplied with the MFEM library
#meshfile_list="mobius-strip.mesh klein-bottle.mesh toroid-wedge.mesh toroid-hex.mesh "
#meshfile_list="toroid-hex.mesh "

# Meshes for the ICP torch (tetrahedral and hexahedral meshes)
#meshfile_list+="cold-flow-sponge-tao4-r2.msh cold-flow-spongezone3.c1.msh "

# Periodic twist mesh from the MFEM miniapps
# Uses third-order hexahedral elements (s3 and s6 denote # of twists)
#meshfile_list="twist-hex-o3-s3-r4-p.mesh twist-hex-o3-s6-r4-p.mesh "
meshfile_list="twist-hex-o3-s6-r4-p.mesh "

# Specify the order of the angular quadrature used
# This provides a collection of directions that provide an orientation to the traversal
# Note that for an Mth order accuracy, we need 2M angles in 2-D and 2M^2 in 3-D, so
# take care when setting this value
quad_order=2

# Specify the upper bound on the number of elements for any given mesh
max_elements=100000000

# Specify the location of the root where data files will be stored
root_dir=${SCRATCH}

for file in $meshfile_list  
do

    printf "Meshfile: ${file}\n"

    # First, for each mesh, generate all the directed graphs and store the output in npz format
    python build_graphs.py -meshfile $file -M $quad_order -max_size $max_elements -root $root_dir

done

printf "\nFinished generating graphs for the meshs. Done!\n"





